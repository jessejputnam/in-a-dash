// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// ############## AUTHENTICATION ##################

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique
  userId        String
  expires       DateTime

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier  String
  token       String    @unique
  expires     DateTime

  @@unique([identifier, token])
}

// #################### USERS #####################

model User {
  id            String        @id @default(cuid())

  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  timestamp     DateTime      @default(now())

  topics        Topic[]

  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  myBoards      Board[]
  savedBoards   FollowingBoard[]
  friends       Friend[]
  comments      Comment[]
  replies       Reply[]
}

model Friend {
  id            String     @id @default(cuid())

  userId        String            
  accepted      Boolean    @default(false)
  blocked       Boolean    @default(false)
  timestamp     DateTime   @default(now())

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


// ##################### USER PREFS #####################

model Topic {
  id        String    @id @default(cuid())
  keyword   String
  user      User[]
}

// ##################### NOTES #####################

model Note {
  id            String     @id @default(cuid())
  userId        String            
  title         String
  description   String
  url           String
  source        String
  text          String?
  timestamp     DateTime   @default(now())

  boards        Board[]
  comments      Comment[]

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// #################### BOARDS #####################

model Board {
  id            String            @id @default(cuid())

  userId        String            
  type          BoardType
  title         String
  description   String
  timestamp     DateTime          @default(now())

  following     FollowingBoard[]  
  notes         Note[]

  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FollowingBoard {
  id          String    @id @default(cuid())

  userId      String            
  boardId     String            
  timestamp   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([boardId])
}

// #################### COMMENTS #####################

model Comment {
  id          String    @id @default(cuid())
  userId      String?      
  noteId      String  
  text        String
  timestamp   DateTime  @default(now())

  replies     Reply[]    

  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([noteId])
}

model Reply {
  id          String    @id @default(cuid())

  userId      String?  
  commentId   String
  text        String
  timestamp   DateTime  @default(now())

  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([commentId])
}

// ##################### ENUMS #####################

enum BoardType {
  MESSAGE
  PRIVATE
  PUBLIC
}

enum AuthType {
  GOOGLE
  APPLE
  CREDENTIALS
}